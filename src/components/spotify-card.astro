---
import { Button } from "@/components/ui/button.tsx";
// Removed SpotifyWebApi import
import {
  SPOTIFY_CLIENT_ID,
  SPOTIFY_CLIENT_SECRET,
  SPOTIFY_REFRESH_TOKEN,
} from "astro:env/server";

import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "@/components/ui/card.tsx";

let error = null;
let track:
  | { isPlaying: false }
  | {
      isPlaying: true;
      title: string;
      artist: string;
      album: string;
      albumImageUrl: string;
      songUrl: string;
      progress: number;
      duration: number;
    } = { isPlaying: false };

// Helper function to format milliseconds to mm:ss
function formatTime(ms: number): string {
  const seconds = Math.floor(ms / 1000);
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${minutes}:${remainingSeconds.toString().padStart(2, "0")}`;
}

// Helper function to encode to base64
function encodeToBase64(text: string): string {
  return btoa(text);
}

// Spotify API endpoints
const ENDPOINTS = {
  accessToken: "https://accounts.spotify.com/api/token",
  currentlyPlaying: "https://api.spotify.com/v1/me/player/currently-playing",
  recentlyPlayed: "https://api.spotify.com/v1/me/player/recently-played",
};

// Function to extract track info from API response
const extractTrackInfo = (trackData: any) => {
  return {
    title: trackData.name,
    artist: trackData.artists.map((artist: any) => artist.name).join(", "),
    album: trackData.album.name,
    albumImageUrl: trackData.album.images[0]?.url,
    songUrl: trackData.external_urls.spotify,
    duration: trackData.duration_ms,
  };
};

// Fetch Spotify data
try {
  // Get access token
  const basicToken = encodeToBase64(
    `${SPOTIFY_CLIENT_ID}:${SPOTIFY_CLIENT_SECRET}`,
  );

  const tokenResponse = await fetch(ENDPOINTS.accessToken, {
    method: "POST",
    headers: {
      Authorization: `Basic ${basicToken}`,
      "Content-Type": "application/x-www-form-urlencoded",
    },
    cf: { cacheTtl: 3599 },
    body: `grant_type=refresh_token&refresh_token=${SPOTIFY_REFRESH_TOKEN}`,
  });

  const tokenData: any = await tokenResponse.json();
  const accessToken = tokenData.access_token;

  // Fetch current playback state
  const currentPlayingResponse = await fetch(ENDPOINTS.currentlyPlaying, {
    headers: { Authorization: `Bearer ${accessToken}` },
    cf: { cacheTtl: 15 },
  });

  if (currentPlayingResponse.status === 200) {
    const data: any = await currentPlayingResponse.json();

    if (data && data.is_playing && data.item && data.item.type === "track") {
      track = {
        isPlaying: true,
        ...extractTrackInfo(data.item),
        progress: data.progress_ms || 0,
      };
    }
  } else {
    // Not playing or no response
    track = { isPlaying: false };
  }
} catch (e) {
  console.error("Error fetching Spotify data:", e);
  error = e instanceof Error ? e.message : "Failed to fetch Spotify data";
}
---

<Card>
  <CardHeader>
    <CardTitle>Spotify</CardTitle>
    <CardDescription
      >{track?.isPlaying ? "Now playing" : "Not playing"}</CardDescription
    >
  </CardHeader>
  <CardContent className="h-40">
    {
      error ? (
        <div class="h-full flex items-center justify-center">
          <p class="text-muted-foreground">{error}</p>
        </div>
      ) : !track?.isPlaying ? (
        <div class="h-full flex items-center justify-center">
          <p class="text-muted-foreground">Nothing playing right now</p>
        </div>
      ) : (
        <div class="flex h-full gap-4">
          <div class="flex-shrink-0">
            <a href={track.songUrl} target="_blank" rel="noopener noreferrer">
              <img
                src={track.albumImageUrl}
                alt={`${track.album} cover`}
                class="h-32 w-32 rounded-md shadow-sm"
              />
            </a>
          </div>
          <div class="flex flex-col justify-between flex-grow overflow-hidden">
            <div>
              <a
                href={track.songUrl}
                target="_blank"
                rel="noopener noreferrer"
                class="font-medium text-lg truncate block hover:underline"
              >
                {track.title}
              </a>
              <p class="text-muted-foreground text-sm truncate">
                {track.artist}
              </p>
              <p class="text-muted-foreground text-xs truncate">
                {track.album}
              </p>
            </div>

            <div class="w-full">
              <div class="h-1 w-full bg-muted rounded-full overflow-hidden">
                <div
                  class="h-full bg-primary"
                  style={{
                    width: `${(track.progress / track.duration) * 100}%`,
                  }}
                />
              </div>
              <div class="flex justify-between text-xs text-muted-foreground mt-1">
                <span>{formatTime(track.progress)}</span>
                <span>{formatTime(track.duration)}</span>
              </div>
            </div>
          </div>
        </div>
      )
    }
  </CardContent>
  <CardFooter>
    <a
      href="https://open.spotify.com"
      target="_blank"
      rel="noopener noreferrer"
    >
      <Button variant="outline" size="sm"> Open Spotify </Button>
    </a>
  </CardFooter>
</Card>
